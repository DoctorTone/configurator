/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 .\vases.gltf --transform -t 
Files: .\vases.gltf [320.93KB] > C:\Users\tony\Documents\Github\configurator\public\models\vases-transformed.glb [28.35KB] (91%)
*/

import { Mesh, MeshStandardMaterial, Group, Texture, DoubleSide } from "three";
import React, { useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { SCENE } from "../state/Config";
import useStore from "../state/store";

type GLTFResult = GLTF & {
  nodes: {
    vase_c: Mesh;
  };
  materials: {
    vase: MeshStandardMaterial;
  };
};

interface Pattern {
  [key: string]: Texture;
}

export function Vase(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF("./models/vases.glb") as GLTFResult;
  const patterns: Pattern = useTexture({
    ink: "./textures/alcohol.jpg",
    zebra: "./textures/splatter.jpg",
    flowers: "./textures/flowers.jpg",
    orange: "./textures/orange.jpg",
    glass: "./textures/flowers.jpg",
  });
  const isRotating = useStore((state) => state.isRotating);
  const currentPattern = useStore((state) => state.currentPattern);
  const groupRef = useRef<Group>(null);

  const getCurrentPattern = () => {
    return patterns[currentPattern];
  };

  useFrame((_, delta) => {
    if (isRotating) {
      groupRef.current!.rotation.y += delta * SCENE.ROTATION_SPEED;
    }
  });

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh
        geometry={nodes.vase_c.geometry}
        rotation={[Math.PI / 2, 0, -2.356]}
        scale={0.1}
      >
        {currentPattern === "glass" ? (
          <meshPhysicalMaterial
            color={0xffffff}
            transmission={1}
            opacity={1}
            metalness={0}
            ior={1.5}
            thickness={0.01}
            roughness={0}
            specularIntensity={1}
            specularColor={0xffffff}
            envMapIntensity={1}
            lightMapIntensity={1}
            transparent={true}
            map={getCurrentPattern()}
          />
        ) : (
          <meshStandardMaterial map={getCurrentPattern()} roughness={0} />
        )}
      </mesh>
    </group>
  );
}

useGLTF.preload("./models/vases.glb");
